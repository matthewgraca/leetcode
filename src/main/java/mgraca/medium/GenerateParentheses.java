package mgraca;

import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;

/*
 * Description: Given n pairs of parentheses, write a function to generate all 
 *  combinations of well-formed parentheses.
 *
 * Constraints:
 *  1 <= n <= 8
 * 
 * Complexity:
 *  Time:
 *  Space:
 */
public class GenerateParentheses{
  public static List<String> generateParenthesis(int n){
    List<String> output = new ArrayList<>();
    output.add("()");
    if (n == 1){
      return output;
    }

    HashSet<String> prunedOutput = new HashSet<>();
    while (n > 1){
      List<String> left = addLeft(new ArrayList<String>(output));
      List<String> right = addRight(new ArrayList<String>(output));
      List<String> middle = addMiddle(new ArrayList<String>(output));
      prunedOutput.clear();
      prunedOutput.addAll(left);
      prunedOutput.addAll(right);
      prunedOutput.addAll(middle);
      output.clear();
      output.addAll(prunedOutput);
      n--;
    }
    output.clear();
    for (String s : prunedOutput){
      output.add(s);
    }
    return output;
  }

  private static List<String> addLeft(List<String> output){
    for (int i = 0; i < output.size(); i++){
      output.set(i, "()" + output.get(i));
    }
    return output;
  }

  private static List<String> addRight(List<String> output){
    //output.remove(0); // remove duplicate already generated by addLeft()
    for (int i = 0; i < output.size(); i++){
      output.set(i, output.get(i) + "()");
    }
    return output;
  }

  private static List<String> addMiddle(List<String> output){
    for (int i = 0; i < output.size(); i++){
      output.set(i, "(" + output.get(i) + ")");
    }
    return output;
  }
}
